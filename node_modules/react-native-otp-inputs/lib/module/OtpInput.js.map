{"version":3,"sources":["OtpInput.tsx"],"names":["React","Component","TextInput","View","defaultStyles","OtpInput","state","isFocused","_onFocus","setState","_onBlur","input","createRef","focus","current","props","clearTextOnFocus","containerStyles","error","focusedBorderColor","handleBackspace","inputStyles","keyboardType","secureTextEntry","selectTextOnFocus","textErrorColor","unfocusedBorderColor","updateText","value","otpContainer","borderColor","otpInput","color"],"mappings":"yaAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAA4C,OAA5C,CACA,OACEC,SADF,CAEEC,IAFF,KAMO,cANP,CAQA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,C,GAsBqBC,CAAAA,Q,0XACnBC,K,CAAQ,CACNC,SAAS,CAAE,KADL,C,OAGAC,Q,CAAW,iBAAY,OAAKC,QAAL,CAAc,CAAEF,SAAS,CAAE,IAAb,CAAd,CAAZ,E,OACXG,O,CAAU,iBAAY,OAAKD,QAAL,CAAc,CAAEF,SAAS,CAAE,KAAb,CAAd,CAAZ,E,OAEXI,K,CAA8BX,KAAK,CAACY,SAAN,E,OAC9BC,K,CAAQ,UAAY,CACzB,MAAKF,KAAL,CAAWG,OAAX,CAAmBD,KAAnB,GACD,C,2EAEe,iBAeV,KAAKE,KAfK,CAEZC,gBAFY,aAEZA,gBAFY,CAGZC,eAHY,aAGZA,eAHY,CAIZC,KAJY,aAIZA,KAJY,CAKZC,kBALY,aAKZA,kBALY,CAMZC,eANY,aAMZA,eANY,CAOZC,WAPY,aAOZA,WAPY,CAQZC,YARY,aAQZA,YARY,CASZC,eATY,aASZA,eATY,CAUZC,iBAVY,aAUZA,iBAVY,CAWZC,cAXY,aAWZA,cAXY,CAYZC,oBAZY,aAYZA,oBAZY,CAaZC,UAbY,aAaZA,UAbY,CAcZC,KAdY,aAcZA,KAdY,CAiBd,MACE,qBAAC,IAAD,EACE,KAAK,CAAE,CACLxB,aAAa,CAACyB,YADT,CAELZ,eAFK,CAGL,CAAEa,WAAW,CAAE,KAAKxB,KAAL,CAAWC,SAAX,CAAuBY,kBAAvB,CAA4CO,oBAA3D,CAHK,CADT,iDAOE,oBAAC,SAAD,EACE,gBAAgB,CAAEV,gBADpB,CAEE,YAAY,CAAEM,YAFhB,CAGE,MAAM,CAAE,KAAKZ,OAHf,CAIE,QAAQ,CAAEiB,UAJZ,CAKE,OAAO,CAAE,KAAKnB,QALhB,CAME,UAAU,CAAEY,eANd,CAOE,GAAG,CAAE,KAAKT,KAPZ,CAQE,eAAe,CAAEY,eARnB,CASE,iBAAiB,CAAEC,iBATrB,CAUE,KAAK,CAAE,CAACpB,aAAa,CAAC2B,QAAf,CAAyBV,WAAzB,CAAsCH,KAAK,EAAI,CAAEc,KAAK,CAAEP,cAAT,CAA/C,CAVT,CAWE,qBAAqB,CAAC,aAXxB,CAYE,KAAK,CAAEG,KAZT,iDAPF,CADF,CAwBD,C,sBArDmC3B,S,SAAjBI,Q","sourcesContent":["import React, { Component, RefObject } from 'react'\nimport {\n  TextInput,\n  View,\n  NativeSyntheticEvent,\n  TextInputKeyPressEventData,\n  TextInputChangeEventData,\n} from 'react-native'\n\nimport defaultStyles from './defaultStyles'\ninterface Props {\n  autoCapitalize: 'none' | 'sentences' | 'words' | 'characters'\n  clearTextOnFocus: boolean\n  containerStyles?: any\n  error?: boolean\n  focusedBorderColor?: string\n  handleBackspace: (event: NativeSyntheticEvent<TextInputKeyPressEventData>) => void\n  inputStyles?: any\n  secureTextEntry: boolean\n  selectTextOnFocus: boolean\n  textErrorColor?: string\n  unfocusedBorderColor: string\n  updateText: (event: NativeSyntheticEvent<TextInputChangeEventData>) => void\n  keyboardType: 'default' | 'email-address' | 'numeric' | 'phone-pad'\n  value?: string\n}\n\ninterface State {\n  isFocused: boolean\n}\n\nexport default class OtpInput extends Component<Props, State> {\n  state = {\n    isFocused: false,\n  }\n  private _onFocus = (): void => this.setState({ isFocused: true })\n  private _onBlur = (): void => this.setState({ isFocused: false })\n\n  public input: RefObject<TextInput> = React.createRef()\n  public focus = (): void => {\n    this.input.current.focus()\n  }\n\n  public render() {\n    const {\n      clearTextOnFocus,\n      containerStyles,\n      error,\n      focusedBorderColor,\n      handleBackspace,\n      inputStyles,\n      keyboardType,\n      secureTextEntry,\n      selectTextOnFocus,\n      textErrorColor,\n      unfocusedBorderColor,\n      updateText,\n      value,\n    } = this.props\n\n    return (\n      <View\n        style={[\n          defaultStyles.otpContainer,\n          containerStyles,\n          { borderColor: this.state.isFocused ? focusedBorderColor : unfocusedBorderColor },\n        ]}\n      >\n        <TextInput\n          clearTextOnFocus={clearTextOnFocus}\n          keyboardType={keyboardType}\n          onBlur={this._onBlur}\n          onChange={updateText}\n          onFocus={this._onFocus}\n          onKeyPress={handleBackspace}\n          ref={this.input}\n          secureTextEntry={secureTextEntry}\n          selectTextOnFocus={selectTextOnFocus}\n          style={[defaultStyles.otpInput, inputStyles, error && { color: textErrorColor }]}\n          underlineColorAndroid=\"transparent\"\n          value={value}\n        />\n      </View>\n    )\n  }\n}\n"]}