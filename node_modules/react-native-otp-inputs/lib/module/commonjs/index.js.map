{"version":3,"sources":["index.tsx"],"names":["MINIMAL_INDEX","OtpInputs","Component","defaultProps","autoCapitalize","clearTextOnFocus","focusedBorderColor","handleChange","console","inputTextErrorColor","keyboardType","numberOfInputs","secureTextEntry","selectTextOnFocus","unfocusedBorderColor","inputs","index","React","loading","otpCode","indexToFocus","Keyboard","text","event","textLength","otpArray","errorMessage","inputContainerStyles","inputStyles","inputArray","containerStyles","errorMessageContainerStyles","errorMessageTextStyles","inputsContainerStyles","defaultStyles"],"mappings":"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","sourcesContent":["import React, { Component, ReactNode, RefObject } from 'react'\nimport {\n  Keyboard,\n  Text,\n  View,\n  TextInputKeyPressEventData,\n  TextInputChangeEventData,\n} from 'react-native'\nimport flatten from 'lodash.flatten'\n\nimport OtpInput from './OtpInput'\nimport defaultStyles from './defaultStyles'\n\ninterface Props {\n  autoCapitalize: 'none' | 'sentences' | 'words' | 'characters'\n  clearTextOnFocus: boolean\n  containerStyles?: any\n  errorMessage?: string\n  errorMessageContainerStyles?: any\n  errorMessageTextStyles?: any\n  focusedBorderColor: string\n  handleChange: (otpCode: string) => void\n  inputContainerStyles?: any\n  inputStyles?: any\n  inputTextErrorColor: string\n  inputsContainerStyles?: any\n  keyboardType: 'default' | 'email-address' | 'numeric' | 'phone-pad'\n  numberOfInputs: number\n  secureTextEntry: boolean\n  selectTextOnFocus: boolean\n  unfocusedBorderColor: string\n}\n\ninterface State {\n  loading: boolean\n  otpCode: Array<string>\n}\n\ntype TextInputOnChangeEventData = {\n  nativeEvent: TextInputChangeEventData\n}\n\ntype TextInputOnKeyPressEventData = {\n  nativeEvent: TextInputKeyPressEventData\n}\n\nconst MINIMAL_INDEX = 0\n\nexport default class OtpInputs extends Component<Props, State> {\n  static defaultProps = {\n    autoCapitalize: 'none',\n    clearTextOnFocus: false,\n    focusedBorderColor: '#0000ff',\n    handleChange: console.log,\n    inputTextErrorColor: '#ff0000',\n    keyboardType: 'phone-pad',\n    numberOfInputs: 4,\n    secureTextEntry: false,\n    selectTextOnFocus: true,\n    unfocusedBorderColor: 'transparent',\n  }\n  public inputs: RefObject<OtpInput>[]\n\n  constructor(props: Props) {\n    super(props)\n\n    const inputs = []\n\n    for (let index = 0; index < this.props.numberOfInputs; index++) {\n      inputs[index] = React.createRef()\n    }\n\n    this.inputs = inputs as Array<RefObject<OtpInput>>\n    this.state = {\n      loading: false,\n      otpCode: [],\n    }\n  }\n\n  public componentDidMount() {\n    this._renderInputs()\n  }\n\n  private _handleAfterOtpAction = (otpCode: Array<string>, indexToFocus: number) => {\n    const { handleChange, numberOfInputs } = this.props\n    handleChange(otpCode.join(''))\n    this.setState({ otpCode })\n\n    if (indexToFocus === numberOfInputs) {\n      return Keyboard.dismiss()\n    }\n\n    if (indexToFocus >= MINIMAL_INDEX && indexToFocus < numberOfInputs) {\n      this._focusInput(indexToFocus)\n    }\n  }\n\n  private _updateText = (event: TextInputOnChangeEventData, index: number) => {\n    let { text } = event.nativeEvent\n    const textLength = text.length\n\n    if (text) {\n      let otpArray = this.state.otpCode\n\n      if (textLength > 2) {\n        const { numberOfInputs } = this.props\n        otpArray[index] = (textLength > numberOfInputs - index ? [text.slice(1)] : [text]).join('')\n\n        this._handleAfterOtpAction(flatten(otpArray).slice(0, numberOfInputs), textLength)\n      } else {\n        otpArray[index] = text[text.length - 1]\n\n        this._handleAfterOtpAction(otpArray, index + 1)\n      }\n    }\n  }\n\n  private _handleBackspace = (event: TextInputOnKeyPressEventData, index: number) => {\n    if (event.nativeEvent.key === 'Backspace') {\n      const { handleChange, numberOfInputs } = this.props\n      const otpCode = this.state.otpCode\n      otpCode[index] = ''\n\n      handleChange(otpCode.join(''))\n      this.setState({ otpCode })\n\n      if (index > MINIMAL_INDEX && index < numberOfInputs) {\n        this._focusInput(index - 1)\n      }\n    }\n  }\n\n  private _focusInput = (index: number) => {\n    this.inputs[index].current.focus()\n  }\n\n  private _renderInputs = () => {\n    const {\n      autoCapitalize,\n      clearTextOnFocus,\n      errorMessage,\n      focusedBorderColor,\n      inputContainerStyles,\n      inputStyles,\n      inputTextErrorColor,\n      keyboardType,\n      numberOfInputs,\n      secureTextEntry,\n      selectTextOnFocus,\n      unfocusedBorderColor,\n    } = this.props\n    const { otpCode } = this.state\n\n    let inputArray = []\n    for (let index = MINIMAL_INDEX; index < numberOfInputs; index++) {\n      inputArray[index] = (\n        <OtpInput\n          autoCapitalize={autoCapitalize}\n          clearTextOnFocus={clearTextOnFocus}\n          containerStyles={inputContainerStyles}\n          error={!!errorMessage}\n          focusedBorderColor={focusedBorderColor}\n          handleBackspace={(event: TextInputOnKeyPressEventData) =>\n            this._handleBackspace(event, index)\n          }\n          inputStyles={inputStyles}\n          key={index}\n          secureTextEntry={secureTextEntry}\n          keyboardType={keyboardType}\n          ref={this.inputs[index]}\n          selectTextOnFocus={selectTextOnFocus}\n          textErrorColor={inputTextErrorColor}\n          unfocusedBorderColor={unfocusedBorderColor}\n          updateText={(event: TextInputOnChangeEventData) => this._updateText(event, index)}\n          value={otpCode[index]}\n        />\n      )\n    }\n\n    return inputArray.map(input => input)\n  }\n\n  public render(): ReactNode {\n    const {\n      containerStyles,\n      errorMessage,\n      errorMessageContainerStyles,\n      errorMessageTextStyles,\n      inputsContainerStyles,\n    } = this.props\n\n    return (\n      <View style={[defaultStyles.container, containerStyles]}>\n        {errorMessage && (\n          <View style={[defaultStyles.errorMessageContainer, errorMessageContainerStyles]}>\n            <Text testID=\"errorText\" style={errorMessageTextStyles}>\n              {errorMessage}\n            </Text>\n          </View>\n        )}\n        <View style={[defaultStyles.inputsContainer, inputsContainerStyles]}>\n          {this._renderInputs()}\n        </View>\n      </View>\n    )\n  }\n}\n"]}