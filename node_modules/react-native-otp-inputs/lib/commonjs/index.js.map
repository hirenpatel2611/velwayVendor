{"version":3,"sources":["index.tsx"],"names":["MINIMAL_INDEX","OtpInputs","props","_handleAfterOtpAction","otpCode","indexToFocus","handleChange","numberOfInputs","join","setState","Keyboard","dismiss","_focusInput","_updateText","event","index","text","nativeEvent","textLength","length","otpArray","state","slice","_handleBackspace","key","inputs","current","focus","_renderInputs","autoCapitalize","clearTextOnFocus","errorMessage","focusedBorderColor","inputContainerStyles","inputStyles","inputTextErrorColor","keyboardType","secureTextEntry","selectTextOnFocus","unfocusedBorderColor","inputArray","map","input","React","createRef","loading","containerStyles","errorMessageContainerStyles","errorMessageTextStyles","inputsContainerStyles","defaultStyles","container","errorMessageContainer","inputsContainer","Component","defaultProps","console","log"],"mappings":"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","sourcesContent":["import React, { Component, ReactNode, RefObject } from 'react'\nimport {\n  Keyboard,\n  Text,\n  View,\n  TextInputKeyPressEventData,\n  TextInputChangeEventData,\n} from 'react-native'\nimport flatten from 'lodash.flatten'\n\nimport OtpInput from './OtpInput'\nimport defaultStyles from './defaultStyles'\n\ninterface Props {\n  autoCapitalize: 'none' | 'sentences' | 'words' | 'characters'\n  clearTextOnFocus: boolean\n  containerStyles?: any\n  errorMessage?: string\n  errorMessageContainerStyles?: any\n  errorMessageTextStyles?: any\n  focusedBorderColor: string\n  handleChange: (otpCode: string) => void\n  inputContainerStyles?: any\n  inputStyles?: any\n  inputTextErrorColor: string\n  inputsContainerStyles?: any\n  keyboardType: 'default' | 'email-address' | 'numeric' | 'phone-pad'\n  numberOfInputs: number\n  secureTextEntry: boolean\n  selectTextOnFocus: boolean\n  unfocusedBorderColor: string\n}\n\ninterface State {\n  loading: boolean\n  otpCode: Array<string>\n}\n\ntype TextInputOnChangeEventData = {\n  nativeEvent: TextInputChangeEventData\n}\n\ntype TextInputOnKeyPressEventData = {\n  nativeEvent: TextInputKeyPressEventData\n}\n\nconst MINIMAL_INDEX = 0\n\nexport default class OtpInputs extends Component<Props, State> {\n  static defaultProps = {\n    autoCapitalize: 'none',\n    clearTextOnFocus: false,\n    focusedBorderColor: '#0000ff',\n    handleChange: console.log,\n    inputTextErrorColor: '#ff0000',\n    keyboardType: 'phone-pad',\n    numberOfInputs: 4,\n    secureTextEntry: false,\n    selectTextOnFocus: true,\n    unfocusedBorderColor: 'transparent',\n  }\n  public inputs: RefObject<OtpInput>[]\n\n  constructor(props: Props) {\n    super(props)\n\n    const inputs = []\n\n    for (let index = 0; index < this.props.numberOfInputs; index++) {\n      inputs[index] = React.createRef()\n    }\n\n    this.inputs = inputs as Array<RefObject<OtpInput>>\n    this.state = {\n      loading: false,\n      otpCode: [],\n    }\n  }\n\n  public componentDidMount() {\n    this._renderInputs()\n  }\n\n  private _handleAfterOtpAction = (otpCode: Array<string>, indexToFocus: number) => {\n    const { handleChange, numberOfInputs } = this.props\n    handleChange(otpCode.join(''))\n    this.setState({ otpCode })\n\n    if (indexToFocus === numberOfInputs) {\n      return Keyboard.dismiss()\n    }\n\n    if (indexToFocus >= MINIMAL_INDEX && indexToFocus < numberOfInputs) {\n      this._focusInput(indexToFocus)\n    }\n  }\n\n  private _updateText = (event: TextInputOnChangeEventData, index: number) => {\n    let { text } = event.nativeEvent\n    const textLength = text.length\n\n    if (text) {\n      let otpArray = this.state.otpCode\n\n      if (textLength > 2) {\n        const { numberOfInputs } = this.props\n        otpArray[index] = (textLength > numberOfInputs - index ? [text.slice(1)] : [text]).join('')\n\n        this._handleAfterOtpAction(flatten(otpArray).slice(0, numberOfInputs), textLength)\n      } else {\n        otpArray[index] = text[text.length - 1]\n\n        this._handleAfterOtpAction(otpArray, index + 1)\n      }\n    }\n  }\n\n  private _handleBackspace = (event: TextInputOnKeyPressEventData, index: number) => {\n    if (event.nativeEvent.key === 'Backspace') {\n      const { handleChange, numberOfInputs } = this.props\n      const otpCode = this.state.otpCode\n      otpCode[index] = ''\n\n      handleChange(otpCode.join(''))\n      this.setState({ otpCode })\n\n      if (index > MINIMAL_INDEX && index < numberOfInputs) {\n        this._focusInput(index - 1)\n      }\n    }\n  }\n\n  private _focusInput = (index: number) => {\n    this.inputs[index].current.focus()\n  }\n\n  private _renderInputs = () => {\n    const {\n      autoCapitalize,\n      clearTextOnFocus,\n      errorMessage,\n      focusedBorderColor,\n      inputContainerStyles,\n      inputStyles,\n      inputTextErrorColor,\n      keyboardType,\n      numberOfInputs,\n      secureTextEntry,\n      selectTextOnFocus,\n      unfocusedBorderColor,\n    } = this.props\n    const { otpCode } = this.state\n\n    let inputArray = []\n    for (let index = MINIMAL_INDEX; index < numberOfInputs; index++) {\n      inputArray[index] = (\n        <OtpInput\n          autoCapitalize={autoCapitalize}\n          clearTextOnFocus={clearTextOnFocus}\n          containerStyles={inputContainerStyles}\n          error={!!errorMessage}\n          focusedBorderColor={focusedBorderColor}\n          handleBackspace={(event: TextInputOnKeyPressEventData) =>\n            this._handleBackspace(event, index)\n          }\n          inputStyles={inputStyles}\n          key={index}\n          secureTextEntry={secureTextEntry}\n          keyboardType={keyboardType}\n          ref={this.inputs[index]}\n          selectTextOnFocus={selectTextOnFocus}\n          textErrorColor={inputTextErrorColor}\n          unfocusedBorderColor={unfocusedBorderColor}\n          updateText={(event: TextInputOnChangeEventData) => this._updateText(event, index)}\n          value={otpCode[index]}\n        />\n      )\n    }\n\n    return inputArray.map(input => input)\n  }\n\n  public render(): ReactNode {\n    const {\n      containerStyles,\n      errorMessage,\n      errorMessageContainerStyles,\n      errorMessageTextStyles,\n      inputsContainerStyles,\n    } = this.props\n\n    return (\n      <View style={[defaultStyles.container, containerStyles]}>\n        {errorMessage && (\n          <View style={[defaultStyles.errorMessageContainer, errorMessageContainerStyles]}>\n            <Text testID=\"errorText\" style={errorMessageTextStyles}>\n              {errorMessage}\n            </Text>\n          </View>\n        )}\n        <View style={[defaultStyles.inputsContainer, inputsContainerStyles]}>\n          {this._renderInputs()}\n        </View>\n      </View>\n    )\n  }\n}\n"]}